@using GameStoreData.Identity.Data;
@using GameStoreData.Service;
@using Microsoft.AspNetCore.Identity;
@using GameStoreData.Models;

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject GameService GameService

@model GameStoreData.ViewModels.CommentVM

@{
    int margin = 10;
    async Task RenderComments(Comment comment, string leftMargin = "10px")
    {
        if (!comment.IsActive) {
            <a asp-controller="Comment" id="restore-btn" style="margin-bottom:7px;" asp-action="RestoreComment" asp-route-id="@comment.Id">Restore</a>
        }
        else 
        {
            <dd id="comment" class="col-sm-10 comment" style="margin-left:@leftMargin; margin-bottom:8px;">
                <p class="user_comment">
                    @(comment.UserId != null ? UserManager.FindByIdAsync(comment.UserId).Result.UserName : "Guest")
                    <h10 style="font-weight:bold">@comment.TimeLeft</h10>
                </p>
                <h5>@comment.Body</h5>

                <div style="margin-bottom:15px;">
                    <a asp-controller="Comment" asp-action="ReplyToComment" asp-route-id="@comment.Id">Reply</a> |
                    <a asp-controller="Comment" asp-action="UpdateComment" asp-route-id="@comment.Id">Edit</a> |
                    <a asp-controller="Comment" asp-action="DeleteComment" asp-route-id="@comment.Id" onclick="markForDelete(@(comment.Id))">Delete</a>
                </div>
            </dd>

            if (comment.ChildComments != null)
            {
                margin += 35;
                foreach (var child in comment.ChildComments)
                {
                    await RenderComments(child, $"{margin}px");
                }
                margin -= 35;
            }
        }
    }
}

<hr />
<div>
    <dl class="row">
        @foreach (var comment in Model.GameComments)
        {
            if (comment.ParentCommentId == null)
            {
                await RenderComments(comment);
            }
        }
    </dl>
</div>

<div class="row">
    <div class="col-md-4">
        <form asp-action="AddComment" asp-controller="Comment" asp-route-model="@Model">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                Comment
                <input asp-for="Body" class="form-control" id="textfield" />
                <span asp-validation-for="Body" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Add" class="button" />
            </div>
            <input type="hidden" asp-for="@Model.CommentVMId" />
            <input type="hidden" asp-for="@Model.GameId" />
            <input type="hidden" asp-for="@Model.ParentCommentId" />
        </form>
    </div>
</div>

<script type="text/javascript">
    //function markForDelete(id) {
    //    localStorage.setItem('commentToDelete', 'Tom');
    //}

    //function addCommentForDeletion(id) {
    //    let comments = JSON.parse(localStore.getItem('commentsToDelete'));
    //    if (comments.findIndex(el => el == id) < 0) {
    //        comments.push(id);
    //        localStorage.setItem('commentsToDelete', JSON.stringify(comments));
    //    }
    //}

    //function deleteComment(id) {
    //    let comments = JSON.parse(localStore.getItem('commentsToDelete'));

    //    if (comments.findIndex(el => el == id) >= 0) {
    //        //delete it from array

    //        //call a method to delete 

    //        localStorage.setItem('commentsToDelete', JSON.stringify(comments));
    //        //comments.delete(id); 

    //    }
    //}

    //$(function () {
    //    // here I delete comments that are in localstorage first
    //  // here I load list of comments then
    //})
</script>